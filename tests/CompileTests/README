This directory contains tests for ROSE.  All rose preprocessors should
be able to parse, process internally (generate ASTs), unparse, and
compile (with a C++ compiler)  the codes in each of these directories.

   The execution of the codes is not tested using theses tests, this is done 
in the tests/RunTests directory (and sub-directories).  Seperate from the
test codes in these directories, we support testing of whole application
codes with ROSE, but these application tests are seperate from ROSE and
the ROSE regression tests directory structure.

Cxx_tests:
   A collection of C++ test codes (not dependent upon any external libraries).
   these test use the default mode of -std=c++98 for the backend compiler (gnu).
   There are about 1500+ test codes in this directory, with more added all the time.

Cxx11_tests:
   This directory has tests that use the non-default C++11 mode of ROSE and the -std-c++0x
   or -std-c++11 modes of the backend compiler. 

C_tests:
   A collection of C test codes (not dependent upon any external libraries).  This
   directory has tests that use the default mode for the backend compiler (equivalent 
   to -std=gnu99).  Note that GNU gcc has a default mode of -std=gnu89, which ROSE
   has a default mode of C99 mode and thus uses -std=gnu99 mode to compile gnerated code.
   This is an attempt to have ROSE default to C99, and live with the fact that GNU
   does not yet support all of C99 and thus defaults to something equivalent to 
   -std=gnu89 mode.

C89_std_c89_tests:
   This directory has tests that use the -std=c89 (without most gnu extensions).

C99_std_gnu99_tests:
   This directory has tests that use the -std=gnu99 (without most gnu extensions).

C99_std_c99_tests:
   This directory has tests that use the -std=99 (without most gnu extensions).

boost_tests:
   This directory has tests that use the boost header files and applications.
   A several of the boost specific tests are in the Cxx_tests directory.
   So this directory does not have many tests at present.

CAF2_tests:
   This directorh is intended to have tests (Fortran) that are specific to the
   requirements of the CAF2 project at Rice.

C++Code:
   This has some example applications that we want to make sure to be tested as part of
   the regression tests that are distributed.  In general, most application testing
   is done using applications that are not distributed with ROSE, but are a part of 
   all commit level tests.
 
colorAST_tests:
   This tests a mechanism to color parts of the AST when generated as dot file for the 
   GraphViz project (an external graph visualization project, open source, from AT&T).
   Dot files are used extensively within the ROSE project.

copyAST_tests:
   This directory has test code that test the AST subtree copy mechanism that is a
   part of ROSE and used as an atomic operation in transformations.

C_subset_of_Cxx_tests:
   This directory uses a subset of the test in the Cxx_tests directory that 
   is the C subset of C++ that will compile as C code using a C89 compiler
   (likely assumes -std=gnu99 modes, since that is the default for ROSE).

CudaTests:
   This directory contains tests codes specific to CUDA.


ElsaTestCases:
   This directory contains test codes from Scott McPeak's Elsa parser project.
   These have been used with permission from Scott (who visited LLNL many years ago).
   These might not be up-to-date versions of the test that he has in his project
   (which is I think still supported).

ExpressionTemplateExample_tests:
   This is a few examples of C++ expression template usage.

Fortran_tests:
   This is a directory of many Fortran tests.  It has subdirectories of 
   many different test for different versions of Fortran plus it includes
   the LANL POP code (used with permission) as a test of the F90 capabilities
   in ROSE.

hiddenTypeAndDeclarationListTests:
   This directory contains some hidden type tests tha trigger name qualification and 
   includes tests specific to where type elaboration is required. Many more name qualification
   and type elaboration tests are a part of the Cxx_tests directory test codes.

Java_tests:
   This is a collection of different versions of Java tests.  More extensive Java
   testing is done outside of these tests (whole applications).

mergeAST_tests:
   This tests the AST merge mechanism that is an atomic operation in ROSE and supports
   whole program analysis (acorss many files).

MicrosoftWindows_tests:
   This tests the use of ROSE in Microsoft Windoes mode (requires seperate configure
   option).  These tests also require the use of a seperate library of Linux header
   files to represent the MS Windows environment.

nameQualificationAndTypeElaboration_tests:
   This directory contains some name qualification tests, but many more name qualification
   tests are a part of the Cxx_tests directory test codes.

OpenClTests:
   This directory contains tests codes specific to OpenCL.

OpenMP_tests:
   This directory contains OpenMP test codes to evaluate the OpenMP compiler
   implementation that is a part of the ROSE project.

OvertureCode:
   These are subsets of the Overture project which is a target for ROSE work.

P++Tests:
   These are subsets of the P++ project which is a target for ROSE work.

Python_tests:
PythonExample_tests:
   These are test code that demonstrate and test the Python language support in ROSE.
   ROSE can built the AST for Python code and permit both analysis and transformation
   of Python code.

RoseExample_tests:
   These are subset of the ROSE project that can be compiled using ROSE as a test for ROSE
   compiling itself.

sizeofOperation_tests:
   This directory has test to compares the statically generated result of the C/C++
   sizeof() operator on different data types to that value generated by the backend 
   compiler (GNU or Intel compiler).

sourcePosition_tests:
   This tests the source position information in the ROSE AST.

staticCFG_tests:
   This tests the construction of the static Control Flow Graphs for a collection of
   test codes.

uninitializedField_tests:
   This is a test for unitialized fields in ROSE (using Valgrind and currently turned off).

UnparseHeadersTests:
   This directory tests the unparsing of header files (a tricky subject in C and C++).
   This work support transformations on headers and their unpasing to a seperate
   directory structure which is given a priority in finding the header files.

unparseToString_tests:
   This directory tests the ability to unparse and AST subtree to a string.

UPC_tests:
   this directory contains test code specific to UPC to support analysis and
   transformations of UPC applications.

virtualCFG_tests:
   This direcotry uses tests codes to test the virtual Control Flow Graph (CFG) 
   in ROSE.

x10_tests:
   This directory is where X10 tests codes will be place when ROSE X10 support is in
   place (current work in DTEC project).


A++Tests: 
    This directory contains the A++ source code with header files and is used
    to test the parsing, construction of AST's, and unparsing.  If the tests pass
    the we know that the ROSE preprocessor has correctly read, processed, and unparsed
    the resulting files.  The test pass if ROSE generates good sufficient to compile
    properly using the target C++ compiler (KCC for the moment).

A++Code: I forget what these tests are (more A++ code tests similar to A++Tests).


************* OLDER INFO  ***************
A++MDI:
   This directory contains the C code used within A++ and represents a test of
   the ROSE preprocessor to read C code, generate internal AST's, and unparse 
   it correctly (so that it will compile properly).

Instructions for building tests for Thrifty:
   You can run the a992-thrifty-mips-compiler tests using the following:

Thrifty installation:

  /nfs/casc/overture/ROSE/git/sescutils-ins/

Environment setup:

export ROSE_TEST_JAVA_PATH="/usr/apps/java/jdk1.6.0_11"
export ROSE_TEST_BOOST_PATH="/export/tmp.hudson-rose/opt/boost_1_40_0-inst"
export THRIFTY_HOME="/nfs/casc/overture/ROSE/git/sescutils-ins/"

Configure options:

  --prefix=$(pwd)/install
  --with-boost=${ROSE_TEST_BOOST_PATH} 
  --with-boost-libdir=${ROSE_TEST_BOOST_PATH}/lib 
  --with-java=${ROSE_TEST_JAVA_PATH} 
  --with-CXX_DEBUG=-g 
  --with-C_DEBUG=-g 
  --with-CXX_WARNINGS=-Wall 
  --with-alternate_backend_C_compiler=${THRIFTY_HOME}/bin/gcc
  --with-alternate_backend_Cxx_compiler=${THRIFTY_HOME}/bin/g++

Build:

  $ make
  $ make check
  $ make install
  $ make installcheck

setenv ROSE_TEST_JAVA_PATH "/usr/apps/java/jdk1.6.0_11"; setenv ROSE_TEST_BOOST_PATH "/export/tmp.hudson-rose/opt/boost_1_40_0-inst"; setenv THRIFTY_HOME "/nfs/casc/overture/ROSE/git/sescutils-ins/"

Configure command line for Thrifty:
   /home/dquinlan/ROSE/git-dq-cxx-rc/configure --with-ROSE_LONG_MAKE_CHECK_RULE=yes --prefix=/home/dquinlan/ROSE/ROSE_CompileTree/git_LINUX-64bit-4.2.4-dq-cxx-rc-thrifty_install --with-boost=/home/dquinlan/local/boost_1_42_0_installTree-gxx-4.2.4 --with-alternate_backend_C_compiler=/nfs/casc/overture/ROSE/git/sescutils-ins//bin/gcc --with-alternate_backend_Cxx_compiler=/nfs/casc/overture/ROSE/git/sescutils-ins//bin/g++

