RoseBlockLevelTracing is the instrumentation and tracing utility for ROSE.

roseBlockLevelTracing.C:
This file instruments each place where control can diverge, e.g., blocks, continual expressions, short-circuit expressions, and labels.
The trace is an unique identifier formed by a <(32-bit)file id, (32-bit) node id> pair. The file id is derived by obtaining a unique number for each file on the machine,  -rose:projectSpecificDatabaseFile db.txt flag is used to achieve this. Node id is a unique number given to each AST node.

typical usage: 
./RoseBlockLevelTracing -c -rose:projectSpecificDatabaseFile db.txt file.C

followed by execution:
ROSE_TRACE_FULL_FILE_PATH=path/to/tracefile1.rosetrace ./exe <input1>
ROSE_TRACE_FULL_FILE_PATH=path/to/tracefile2.rosetrace ./exe <input2>

RoseMultiTraceCommonPathFinder.C
This file takes multiple trace files (generated from the previous step) and writes the common prefix found in them to an output trace file, in exactly the same format.

typical usage:
./RoseMultiTraceCommonPathFinder tracefile1.rosetrace tracefile2.rosetrace -o tracefile.common_prefix.rosetrace

RoseCommonPathToSgNodeMapper.C
This file reads a trace file (presumably the the one generated in the previous step after finding the common prefix) and a database file (should be same as passed during compilation using -rose:projectSpecificDatabaseFile flag) and maps each trace id to the correct SgNode. In the process it uses ROSE to build AST for each file found in the trace. The user must ensure that the he/she passes correct flags to the compiler during this phase so that they match the flags passed during "roseBlockLevelTracing" phase.

typical usage:
./RoseCommonPathToSgNodeMapper tracefile.common_prefix.rosetrace db.txt 

Contact Milind Chabbi (milind.chabbi@rice.edu) for details.


