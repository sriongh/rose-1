
// Analysis steps for recognition of C++ classes, constructores, and member functions
//
// General Guiding Rules:
//    1) If a class is not accessed then it does not exist for purposes of this analysis.
//    2) If a data member is not accessed then it does not exist for purposes of this analysis.
//
// Required analysis support:
//    1) Need to recognise structural representation of member data initialization
//       (e.g. mov DWORD PTR ds:[eax + 0x04], 0xdeadbeef), where "ds", "eax", "0x04", and "0xdeadbeef"
//       are abstracted into "segment", "register", "offset", and "value".
//    2) Across instructions we need to know the value of "eax" since this is the
//       base address of the data structure being referenced.
//
// Observations:
//    1) Both constructors and member functions look the same structurally.
//    2) The addresses member functions can be used to identify where they
//       are called.
//    3) Member data initialization happends relative to "ds" register and stack variable
//       initialization happens relative to "ss" register.
//    4) Member function for a class appear together for that class and are in order of 
//       declaration in the original program.
//    5) The function for static initialization appears to have a signature.


Note: Use "objdump -h testProgram32_1"
to see the section boundaries of the binary.


--------------------------Classes [With v-tables]-----------------------
I. vtable identification
  1. Via constructor identification
  2. Via cross references
    a. [simple] matching "vtable" entries
    b. [hard] ordered matching function types

  3. RTTI?
      C++ source code is often not compiled to generate RTTI information.
  4. Via symbols
      Binaries are frequently not compiled with symbol information.

II. class hieararchy
  1. Via constructor callgraph
  2. Via vtable similarity/size
  3. Via called function typing

III. Function cross ref resolution
  1. Via possible types/vtable entry
  2. Via symbols


  
I. vtable identification
    The vtable creates a level of indirection between function call sites
    and the functions that actually get called.  Its important to identify
    where the vtables are, because they can provide important hints to the
    structure of classes, as well as containing the actual addresses of 
    functions.
    Some 'facts' about vtables:
     - Normally in a read-only section 
     - Normally the address of a class' vtable will be copied into the
       first field of an instance of a class
     - Normally references to the 'purecall' function can be found in 
       vtables.  In C++, you should normally not be able call a pure
       virtual function, but in case you do a standard error function
       is often provided.
     - A vtable is normally composed of arrays of addresses
        into the .text (code) section
     - RTTI (runtime type information) may be spacially proximate
        to the vtable (just above/just below)
     - Static Const data (esp string) may be spacially proximate
        to the vtable

  1. Via constructor identification
     Constructors are functions that initialize a new instance 
      of a class.  Generally, the first field in a class will be
      a pointer to the objects vtable.
      class c1
      {     
	    virtual void foo();
	    int data1;
      };
      
      struct class_c1_instance
      {
	void* classC1Vtable;
	int data1;
      };

      If you've identified a function as a constructor, identifying
      which address is copied into the first field of the instance
      will tell you where that object's vtable is.


  2. Via cross references
    Its pretty easy to "guess" at where vtables are by looking in the
    read only sections for pointers into the text section.  This does
    not however necessarily help with identifying the "starts" of 
    vtables.      
      There are a few additional facts to that may help us with a simple
       examination.  
       1. A single vtable is unlikely to repeat a function (except purecall).
          So, if you see
	  A, B, C, B, D, C
	  You can be pretty sure that the first vtable is one of the following
	  {A; A, B; A,B,C} 
       2. There are unlikely to be cross references into the vtable
          except the start of vtables, and possibly destructors or 
	  const static data
       3. A vtable likely starts or stops with RTTI/const static
          data.  So, if you see
	  A, B, C, "hello world", D, E, F
	  its a pretty good bet that C and D are not in the same vtable
       
  3. RTTI?
  4. Via symbols

II. class hieararchy
  1. Via constructor callgraph
	constructors in a class hierarchy are called in a 
	specific order - namely that a parent constructor is called by
	the child - generally before the child loads its vtable.
	This fact either depends on, or strengthens analysis of what 
	is and is not a constructor.
	Constructor analysis can be tricky because there can be multiple
	constructors at each level.  Multi inheritance, virtual inheritance
	and embedded classes can also muddle such analysis.

  2. Via destructor callgraph
	destructors have a hierarchy very similar to constructors, including
	loading vtable after calling the parent destructor.  
	Destructors may in fact be an easier target for callgraph analysis, because
	each class can have only one destructor, and generally it will exist
	as an entry in the virtual table.

  3. Via vtable similarity/size
	You can make a guess at a class hierarchy by simply examining virtual tables.
	The vtable for a child class must be at least as large as its parent.  Also
	any function that is NOT overridden in a child will have the same value as its parent.
	So, if you see:
	A B C D B C
	You can guess the following
	class1 : 
		A 
		B 
		C
	class2 : class 1
		D [overrides A]
		B
		C

	Of course, it could just as well be:
	class1: A
	class2: B
	class3: C
	class4 : class1
		D [overrides A]
	class5 : class2
		B [class5 doesn't override anything]
	class6 : class3
		C [class6 doesn't override anything]
	
	However, with larger vtables and more obvious vtable separators, this becomes easier

  4. Via function typing
	If the types of some (or all) function are known, you can greatly aid #3's resolution.
	For instance, in the above - if 
	A : x -> y
	and 
	D : x,a->z

	You can be sure A is not overriding D, therefore the first scenario cannot be the case.
	You must be careful with this to account for c++ typing rules.  In particular
	A : x -> y
	D : x -> z
	does not immediately rule out that D overrides A
	in particular if;
	z : y [y inherits from z]
	This could very well be an override.

	Its not clear how templates, using declarations, and multiple and virtual inheritance can affect these
	mechanisms.
	

  5. Via called function typing
	A much more complicated mechanism involves examining where functions are called with class instances as
	arguments.  If more than one type of object is passed in, they most likely are related in an an
	inheritance hierarchy. An example:
	void foo(TypeF *arg1);
	...
	TypeA *a=...;
	foo(a);
	
	...	
	TypeB *b=...;
	foo(b);

	We know that TypeF, TypeA and TypeB must be related in some way - for instance
	TypeA = TypeF; TypeB : TypeA
	or
	TypeB : TypeA : TypeF
	TypeA : TypeB : TypeF

	Further, even if we don't actually know the vtables for TypeF,TypeA or TypeB, we can 
	set some bounds on their size based on functions called by foo of the form arg1->bar()

	such calls will look like
	v = arg1->vtable (usually just (void*)(*arg1))
	bar = v + offset
	call bar(arg1)

	offset therefore sets a minimum on the size of the vtable of TypeF, and therefore TypeA and TypeB


III. Function cross ref resolution
	While determining types is an important step, the ultimate goal is to solve the issue of 
	indirect function calls so a proper call graph can be created.  This requires as a 
	prerequisite an accurate recognition of classes, the type hierarchy, and their vtables

     Once that information is available the same technique that work in source code call graph resolution
	will work on binary analysis. 
		


