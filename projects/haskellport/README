Haskellport README:

Report by Dan Quinlan (9/22/2013)

   This project has a few projects and is no longer actively maintained.
The problems that appear to be specific to the EDG4x branch are listed below with the
asociated error message and generated code and a discussion of the problems with the
generated code.

   I think the conclusion should be to eliminate the project from being tested by ROSE
within the EDG4x branch.  If desirable, the project could be fixed, but the scope is
    beyond that of fixing just some part of the EDG4x work since I think it is
the case theat the haskell project would have to be extended to support some
required details (very few details, it seems).

   When I started today this project was failing within ROSE in the handling of 
the comments associated with the header files copied to the local directory:
    headersWithoutLineDirective
Specifally the file:
    headersWithoutLineDirective/Cxx_GrammarTreeTraversalAccessEnums.h
which didn't have an associated list of comments and CPP directives
in the list "attributeMapForAllFiles" at:
    attachPreprocessingInfoTraversal.C at line 1400
 in function:
  AttachPreprocessingInfoTreeTrav::evaluateSynthesizedAttribute(SgNode *n,AttachPreprocessingInfoTreeTraversalInheritedAttrribute inheritedAttribute,SubTreeSynthesizedAttributes synthiziedAttributeList)

This issue was fixed by allowing files that are not listed with comments and CPP 
directives to NOT be an error.


The second error was in haskell project itself in file:
    genStubsAndWrappers.C
at line: 1200
Here the issue was that an the assigned value to an enum was expected to be 
a SgIntVal object and it could (I guess within only EDG4x) also be a 
SgEnumVal IR node alternatively.  This was fixed and the code generator
then worked proprly to generate a file, but that file has some problems when being
compiled using GNU g++. The exact error are listed below.


When compiling the generated file (generated by the haskell port project) 
we get the following errors (from g++):

WrapSage3Classes.C: In function 'std::vector<SgGraphEdge*, std::allocator<SgGraphEdge*> >* _haskell_stub_L21154R__SgGraph_function_parameter_list__args_(SgGraph*)':
WrapSage3Classes.C:11388: error: global qualification of class name is invalid before '{' token
WrapSage3Classes.C:11388: error: too few template-parameter-lists
WrapSage3Classes.C:11388: error: invalid type in declaration before '=' token
WrapSage3Classes.C:11388: error: global qualification of class name is invalid before '{' token
WrapSage3Classes.C:11388: error: too few template-parameter-lists
WrapSage3Classes.C:11388: error: cannot convert 'std::vector<SgGraphEdge*, std::allocator<SgGraphEdge*> >' to 'int' in initialization
WrapSage3Classes.C:11389: error: cannot convert 'int*' to 'std::vector<SgGraphEdge*, std::allocator<SgGraphEdge*> >*' in return
WrapSage3Classes.C: In function 'SgFunctionSymbol* _haskell_stub_L23809R__L23810R(SgScopeStatement*, char*, const SgType*, SgTemplateParameterPtrList*, SgTemplateArgumentPtrList*)':
WrapSage3Classes.C:23229: error: no matching function for call to 'SgScopeStatement::find_symbol_by_type_of_function(char*&, const SgType*&, SgTemplateParameterPtrList*&, SgTemplateArgumentPtrList*&)'
WrapSage3Classes.C: In function 'std::vector<SgInterfaceStatement*, std::allocator<SgInterfaceStatement*> >* _haskell_stub_L25942R__L25934R(const SgModuleStatement*)':
WrapSage3Classes.C:32381: error: global qualification of class name is invalid before '{' token
WrapSage3Classes.C:32381: error: too few template-parameter-lists
WrapSage3Classes.C:32381: error: invalid type in declaration before '=' token
WrapSage3Classes.C:32381: error: global qualification of class name is invalid before '{' token
WrapSage3Classes.C:32381: error: too few template-parameter-lists
WrapSage3Classes.C:32381: error: cannot convert 'std::vector<SgInterfaceStatement*, std::allocator<SgInterfaceStatement*> >' to 'int' in initialization
WrapSage3Classes.C:32382: error: cannot convert 'int*' to 'std::vector<SgInterfaceStatement*, std::allocator<SgInterfaceStatement*> >*' in return
WrapSage3Classes.C: In function 'SgSymbol* _haskell_stub_L33447R__SgSymbol_function_parameter_list__args_()':
WrapSage3Classes.C:65323: error: cannot allocate an object of abstract type 'SgSymbol'
../../src/frontend/SageIII/Cxx_Grammar.h:219504: note:   because the following virtual functions are pure within 'SgSymbol':
../../src/frontend/SageIII/Cxx_Grammar.h:219514: note: 	virtual SgName SgSymbol::get_name() const
../../src/frontend/SageIII/Cxx_Grammar.h:219515: note: 	virtual SgType* SgSymbol::get_type() const
gmake: *** [WrapSage3Classes.lo] Error 1



1) The code generation is incorrect for the generation of functions:

Associated with the following error:
WrapSage3Classes.C: In function 'std::vector<SgGraphEdge*, std::allocator<SgGraphEdge*> >* _haskell_stub_L21154R__SgGraph_function_parameter_list__args_(SgGraph*)':
WrapSage3Classes.C:11388: error: global qualification of class name is invalid before '{' token
WrapSage3Classes.C:11388: error: too few template-parameter-lists
WrapSage3Classes.C:11388: error: invalid type in declaration before '=' token
WrapSage3Classes.C:11388: error: global qualification of class name is invalid before '{' token
WrapSage3Classes.C:11388: error: too few template-parameter-lists
WrapSage3Classes.C:11388: error: cannot convert 'std::vector<SgGraphEdge*, std::allocator<SgGraphEdge*> >' to 'int' in initialization
WrapSage3Classes.C:11389: error: cannot convert 'int*' to 'std::vector<SgGraphEdge*, std::allocator<SgGraphEdge*> >*' in return

is the following generated code (with comment):

/* Wrapper for ::SgGraph::generateSpanningTree class ::std::vector < SgGraphEdge * , allocator< SgGraphEdge * > > () */
class ::std::vector < SgGraphEdge * , allocator< SgGraphEdge * > > * _haskell_stub_L21154R__SgGraph_function_parameter_list__args_(class ::SgGraph* v0) {
	class ::std::vector < SgGraphEdge * , allocator< SgGraphEdge * > >  rv = v0->generateSpanningTree();

// The error is that the generated code contains "{}" in two places.
//	class ::std::vector < SgGraphEdge * , allocator< SgGraphEdge * > > {} *urv = new class ::std::vector < SgGraphEdge * , allocator< SgGraphEdge * > > {}(rv);
	class ::std::vector < SgGraphEdge * , allocator< SgGraphEdge * > > *urv = new class ::std::vector < SgGraphEdge * , allocator< SgGraphEdge * > > (rv);

	return urv;
}



2) The code generation is incorrect for the generation of functions:

Associated with the following error:
WrapSage3Classes.C: In function 'SgFunctionSymbol* _haskell_stub_L23809R__L23810R(SgScopeStatement*, char*, const SgType*, SgTemplateParameterPtrList*, SgTemplateArgumentPtrList*)':
WrapSage3Classes.C:23229: error: no matching function for call to 'SgScopeStatement::find_symbol_by_type_of_function(char*&, const SgType*&, SgTemplateParameterPtrList*&, SgTemplateArgumentPtrList*&)'

is the following generated code (with comment):

/* Wrapper for ::SgScopeStatement::find_symbol_by_type_of_function class ::SgFunctionSymbol*()(const class ::SgName&, const class ::SgType*, ::SgTemplateParameterPtrList*, ::SgTemplateArgumentPtrList*) */
// class ::SgFunctionSymbol* _haskell_stub_L23809R__L23810R(class ::SgScopeStatement* v0, char * v1, const class ::SgType* v2, ::SgTemplateParameterPtrList* v3, ::SgTemplateArgumentPtrList* v4) {
class ::SgFunctionSymbol* _haskell_stub_L23809R__L23810R(class ::SgScopeStatement* v0, char * v1, const ::SgType* v2, ::SgTemplateParameterPtrList* v3, ::SgTemplateArgumentPtrList* v4) {

// The template functions is not specified properly (I think).
//	class ::SgFunctionSymbol* rv = v0->find_symbol_by_type_of_function(v1, v2, v3, v4);
   const SgName name = v1;
   const SgType* type = v2;
	class ::SgFunctionSymbol* rv = v0->find_symbol_by_type_of_function(name, type, v3, v4);

	return rv;
}

The problem here is that find_symbol_by_type_of_function() is a template function and does
not appear to be resolved for the required intance required (perhaps the syntax being
used in the generated code is incorrect).


3) The code generation is incorrect for the generation of functions:

Associated with the following error:
WrapSage3Classes.C: In function 'std::vector<SgInterfaceStatement*, std::allocator<SgInterfaceStatement*> >* _haskell_stub_L25942R__L25934R(const SgModuleStatement*)':
WrapSage3Classes.C:32381: error: global qualification of class name is invalid before '{' token
WrapSage3Classes.C:32381: error: too few template-parameter-lists
WrapSage3Classes.C:32381: error: invalid type in declaration before '=' token
WrapSage3Classes.C:32381: error: global qualification of class name is invalid before '{' token
WrapSage3Classes.C:32381: error: too few template-parameter-lists
WrapSage3Classes.C:32381: error: cannot convert 'std::vector<SgInterfaceStatement*, std::allocator<SgInterfaceStatement*> >' to 'int' in initialization
WrapSage3Classes.C:32382: error: cannot convert 'int*' to 'std::vector<SgInterfaceStatement*, std::allocator<SgInterfaceStatement*> >*' in return

This is a repeat of the problem discussed in #1 (above).


4) The code generation is incorrect for the generation of functions:

Associated with the following error:
WrapSage3Classes.C:65323: error: cannot allocate an object of abstract type 'SgSymbol'
../../src/frontend/SageIII/Cxx_Grammar.h:219504: note:   because the following virtual functions are pure within 'SgSymbol':
../../src/frontend/SageIII/Cxx_Grammar.h:219514: note: 	virtual SgName SgSymbol::get_name() const
../../src/frontend/SageIII/Cxx_Grammar.h:219515: note: 	virtual SgType* SgSymbol::get_type() const

is the following generated code (with comment):

/* Wrapper for ::SgSymbol::SgSymbol void () */
class ::SgSymbol* _haskell_stub_L33447R__SgSymbol_function_parameter_list__args_() {

// The problem here is the SgSymbol is an abstract base class in later versions of ROSE.
// It might be that this points to a problem where the associated vitual function should
// be defined for the base class (this might actually fix this problem).
	class ::SgSymbol* rv = new SgSymbol();

	return rv;
}

