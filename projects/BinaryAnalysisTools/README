===============================================================================================================================
== Control Flow Graph (CFG) dumps
===============================================================================================================================

Control flow graph dumps contain a lot of information packed into
limited space.  Here's an example of part of a dump of a CFG (lines
quoted with '>') and comments about what each preceding line means.

>  basic block 0x00101704<36630,X> entry block for function 0x00101704
   	       			   	Start of information for a basic block
   	       			   	0x00101704 is the entry virtual address for the basic block
					<...> are comments/auxiliary information
					36630 is the unique CFG vertex ID number
					"X" means we tried to find an instruction there and failed (not-eXisting block)
					"entry block" means this basic block is a function entry address
					"function 0x00101704" is a function primary entry address
					The body of each basic block will be indented two additional spaces
>    predecessors: 0x10053dde<36629>:0x10053e02<fcall>
					List of control flow predecessors for this block (there is one)
					0x10053dde is the entry address for the predecessor basic block
					36629 is the CFG vertex ID for the basic block
					0x10053e02 is the starting address of the final instruction of the basic block
					<fcall> means the predecessor made a function call to this basic block
>    successors: non-existing<2>
					List of control flow successors for this block (there is one)
					"non-existing" is a special CFG vertex for basic blocks whose first insn failed
					2 is the unique CFG vertex ID for this special vertex
>  basic block 0x10000000<3> entry block for function 0x10000000 "_start"
   	       		     	        Start of information for another basic block; blocks are sorted by starting address
					0x10000000 is the starting address for this basic block
					3 is the unique CFG vertex ID number
					"_start" is the name of the function
>    predecessors: none
					List of control flow predecessors (none in this case)
>      0x10000000: 4e 56 00 00             |NV..    |   link.w bp, 0x0000
>      0x10000004: 2f 0c                   |/.      |   move.l a4, [--sp]
>      0x10000006: 2f 0b                   |/.      |   move.l a3, [--sp]
>      0x10000008: 2f 0a                   |/.      |   move.l a2, [--sp]
>      0x1000000a: 45 f9 10 69 47 54       |E..iGT  |   lea.l  [0x10694754<275334996>], a2
>      0x10000010: 47 f9 10 69 51 ac       |G..iQ.  |   lea.l  [0x106951ac<275337644>], a3
>      0x10000016: a3 40                   |.@      |   mov3q.l 0x00000001, d0
>      0x10000018: b0 aa 00 18             |....    |   cmp.l  [a2+0x00000018], d0
>      0x1000001c: 66 44                   |fD      |   bne.b  0x10000062<268435554>
       		      			List of instructions for the basic block in execution order
					0x10000000 etc are the instruction starting addresses
					2-digit hexadecimal are the machine code for the instruction in address order
					Sometimes "." is used for "00" and "##" is used for "ff" to make these two stand out
					Letters between '||' are the ASCII characters or '.' for non-graphic characters
					<...> are comments (e.g., decimal representations); [...] are memory references
					Operand order depends on the instruction architecture (m68k is source, destination)
>    stack delta: 0xfffffff0<4294967280,-16>[32]
					Amount by which this basic block adjusts the stack pointer
					0xfffffff0 is the hexadecimal adjustment
					<...> is a comment
					4294967280 is the decimal representation
					-16 is the signed decimal representation
					32 is the width of the value in bits
>    successors: 0x1000001e<4> 0x10000062<5>
					List of control flow successors (2 in this case)
					0x1000001e and 0x10000062 are basic block entry addresses
					4 and 5 are the unique ID numbers for those CFG vertices
